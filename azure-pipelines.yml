trigger:
- master

jobs:
- job: 'Build'
  strategy:
    matrix:
      windows:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'win'
        def: '-DBUILD_WINDOWS=on'
        arch: x64
      windows_x86:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'win'
        def: '-DBUILD_WINDOWS=on'
        arch: x86
      mingw:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'mingw'
        def: '-DBUILD_GTK3=on'
        arch: 'x64'
        arch_pkg: 'x86_64'
        msystem: 'MINGW64'
        bindir: 'C:\msys64\mingw64\bin'
        bindir2: 'C:/msys64/mingw64/bin'
      mingw_x86:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'mingw'
        def: '-DBUILD_GTK3=on'
        arch: 'x86'
        arch_pkg: 'i686'
        msystem: 'MINGW32'
        bindir: 'C:\msys64\mingw32\bin'
        bindir2: 'C:/msys64/mingw32/bin'
      linux:
        imageName: 'ubuntu-latest'
        plat: 'linux'
        rid: 'linux'
        def: '-DBUILD_GTK3=on'
      mac:
        imageName: 'macos-latest'
        plat: 'mac'
        rid: 'mac'
        def: '-DBUILD_COCOA=on'
      mac_gtk:
        imageName: 'macos-latest'
        plat: 'mac'
        rid: 'mac-gtk'
        def: '-DBUILD_GTK3=on'
  pool:
    vmImage: $(imageName)

  variables:
    macLLVMPath: /usr/local/opt/llvm/bin

  steps:
  - script: |
      git submodule init
      git submodule update --init
    displayName: 'Init git submodule'

  - script: |
      git clone https://github.com/Microsoft/vcpkg.git
      vcpkg\bootstrap-vcpkg.bat -Win64
    displayName: 'Install vcpkg'
    condition: eq(variables.rid, 'win')

  - script: |
      vcpkg\vcpkg install wil:$(arch)-windows boost-nowide:$(arch)-windows boost-multi-index:$(arch)-windows
    displayName: 'Install wil & boost'
    condition: eq(variables.rid, 'win')

  - pwsh: |
      cd C:\
      git clone https://github.com/msys2/msys2-ci-base.git msys64
      C:\msys64\usr\bin\pacman --noconfirm -Syyuu
      C:\msys64\usr\bin\pacman --noconfirm -Syuu
      C:\msys64\usr\bin\pacman --noconfirm -S git base base-devel msys2-devel
      C:\msys64\usr\bin\dash /usr/bin/rebaseall -p
      C:\msys64\usr\bin\bash --login -c "pacman -S --noconfirm mingw-w64-$(arch_pkg)-gcc mingw-w64-$(arch_pkg)-pkg-config mingw-w64-$(arch_pkg)-gtk3 mingw-w64-$(arch_pkg)-boost"
    displayName: 'Install msys2'
    condition: eq(variables.rid, 'mingw')
    env:
      MSYSTEM: $(msystem)

  - script: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      sudo add-apt-repository ppa:mhier/libboost-latest
      sudo apt-get install gcc-10 g++-10 libgtk-3-dev libwebkit2gtk-4.0-dev ninja-build libboost1.70-dev
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
    displayName: 'Install linux dependencies'
    condition: eq(variables.rid, 'linux')

  - script: |
      brew install ninja boost llvm
    displayName: 'Install ninja & boost & llvm'
    condition: eq(variables.plat, 'mac')

  - script: |
      brew install gtk+3 pkgconfig
    displayName: 'Install gtk'
    condition: eq(variables.rid, 'mac-gtk')

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(arch)
      mkdir build & cd build
      cmake .. -GNinja $(def) -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)-$(arch) -DVCPKG_TARGET_TRIPLET=$(arch)-windows -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
    displayName: 'Configure all projects'
    condition: eq(variables.rid, 'win')

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(arch)
      mkdir build & cd build
      cmake .. -GNinja $(def) -DCMAKE_C_COMPILER=$(bindir2)/gcc.exe -DCMAKE_CXX_COMPILER=$(bindir2)/g++.exe -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)-$(arch)
    displayName: 'Configure all projects'
    condition: eq(variables.rid, 'mingw')
    env:
      MSYSTEM: $(msystem)
      PATH: $(bindir)

  - task: CMake@1
    displayName: 'Configure all projects'
    condition: eq(variables.plat, 'linux')
    inputs:
      cmakeArgs: .. $(def) -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)

  - task: CMake@1
    displayName: 'Configure all projects'
    condition: eq(variables.plat, 'mac')
    inputs:
      cmakeArgs: .. $(def) -GNinja -DCMAKE_C_COMPILER=$(macLLVMPath)/clang -DCMAKE_CXX_COMPILER=$(macLLVMPath)/clang++ -DCMAKE_OBJC_COMPILER=$(macLLVMPath)/clang -DCMAKE_OBJCXX_COMPILER=$(macLLVMPath)/clang++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(arch)
      cd build
      ninja install
      cd ..
      copy vcpkg\installed\$(arch)-windows\bin\boost_nowide*.dll $(Build.ArtifactStagingDirectory)\$(rid)-$(arch)\bin\
    displayName: 'Install all projects'
    condition: eq(variables.rid, 'win')

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(arch)
      cd build
      ninja install
    displayName: 'Install all projects'
    condition: eq(variables.rid, 'mingw')
    env:
      MSYSTEM: $(msystem)
      PATH: $(bindir)

  - script: |
      cd build
      ninja install
    displayName: 'Install all projects'
    condition: ne(variables.plat, 'win')

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'
