trigger:
- master

jobs:
- job: 'Build'
  strategy:
    matrix:
      windows:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'win'
        def: '-DBUILD_WINDOWS=on'
        arch: x64
      windows_x86:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'win'
        def: '-DBUILD_WINDOWS=on'
        arch: x86
      mingw:
        imageName: 'windows-latest'
        plat: 'win'
        rid: 'mingw'
        def: '-DBUILD_GTK3=on'
      linux:
        imageName: 'ubuntu-latest'
        plat: 'linux'
        rid: 'linux'
        def: '-DBUILD_GTK3=on'
      mac:
        imageName: 'macos-latest'
        plat: 'mac'
        rid: 'mac'
        def: '-DBUILD_COCOA=on'
      mac_gtk:
        imageName: 'macos-latest'
        plat: 'mac'
        rid: 'mac-gtk'
        def: '-DBUILD_GTK3=on'
  pool:
    vmImage: $(imageName)

  variables:
    macLLVMPath: /usr/local/opt/llvm/bin

  steps:
  - script: |
      git clone https://github.com/Microsoft/vcpkg
      vcpkg\bootstrap.bat -Win64
      vcpkg\vcpkg install wil:$(arch)-windows boost-nowide:$(arch)-windows
    displayName: 'Install wil & boost-nowide'
    condition: eq(variables.rid, 'win')

  - script: |
      cinst msys2 --params "/InstallDir=C:/msys64" --no-progress
      C:\msys64\usr\bin\bash --login -c "pacman -S --noconfirm git mingw-w64-x86_64-gcc mingw-w64-x86_64-pkg-config mingw-w64-x86_64-gtk3 mingw-w64-x86_64-boost"
    displayName: 'Install msys2'
    condition: eq(variables.rid, 'mingw')
    env:
      MSYSTEM: MINGW64

  - script: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      sudo apt-get install gcc-10 g++-10 libgtk-3-dev libwebkit2gtk-4.0-dev ninja-build
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
    displayName: 'Install linux dependencies'
    condition: eq(variables.rid, 'linux')

  - script: |
      brew install ninja boost llvm
    displayName: 'Install ninja & boost & llvm'
    condition: eq(variables.plat, 'mac')

  - script: |
      brew install gtk+3 pkgconfig
    displayName: 'Install gtk'
    condition: eq(variables.rid, 'mac-gtk')

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(arch)
      mkdir build & cd build
      cmake .. -GNinja $(def) -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)-$(arch) -DVCPKG_TARGET_TRIPLET=$(arch)-windows -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
    displayName: 'Configure all projects'
    condition: eq(variables.rid, 'win')

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
      mkdir build & cd build
      cmake .. -GNinja $(def) -DCMAKE_C_COMPILER=C:/msys64/mingw64/bin/gcc.exe -DCMAKE_CXX_COMPILER=C:/msys64/mingw64/bin/g++.exe -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)
    displayName: 'Configure all projects'
    condition: eq(variables.rid, 'mingw')
    env:
      MSYSTEM: MINGW64
      PATH: C:\msys64\mingw64\bin

  - task: CMake@1
    displayName: 'Configure all projects'
    condition: eq(variables.plat, 'linux')
    inputs:
      cmakeArgs: .. $(def) -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)

  - task: CMake@1
    displayName: 'Configure all projects'
    condition: eq(variables.plat, 'mac')
    inputs:
      cmakeArgs: .. $(def) -GNinja -DCMAKE_C_COMPILER=$(macLLVMPath)/clang -DCMAKE_CXX_COMPILER=$(macLLVMPath)/clang++ -DCMAKE_OBJC_COMPILER=$(macLLVMPath)/clang -DCMAKE_OBJCXX_COMPILER=$(macLLVMPath)/clang++ -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory)/$(rid)

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" $(arch)
      cd build
      ninja install
    displayName: 'Install all projects'
    condition: eq(variables.rid, 'win')

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
      cd build
      ninja install
    displayName: 'Install all projects'
    condition: eq(variables.rid, 'mingw')
    env:
      MSYSTEM: MINGW64
      PATH: C:\msys64\mingw64\bin

  - script: |
      cd build
      ninja install
    displayName: 'Install all projects'
    condition: ne(variables.plat, 'win')

  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      artifactName: 'publish'
